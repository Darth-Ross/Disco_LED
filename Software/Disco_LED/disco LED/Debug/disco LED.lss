
disco LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000023c  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000175  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000219  00000000  00000000  000005b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a8  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <RGB>:
#include <avr/io.h>
#include <disco_functions.h>


void RGB(char red, char green, char blue) {		//pwm functie maken
	if(red > 0) {
  80:	88 23       	and	r24, r24
  82:	11 f0       	breq	.+4      	; 0x88 <RGB+0x8>
		PORTD |= (1 << PIND3);
  84:	5b 9a       	sbi	0x0b, 3	; 11
  86:	01 c0       	rjmp	.+2      	; 0x8a <RGB+0xa>
	}
	else {
		PORTD &=~ (1 << PIND3);
  88:	5b 98       	cbi	0x0b, 3	; 11
	}	
	

	if(green > 0) {
  8a:	66 23       	and	r22, r22
  8c:	11 f0       	breq	.+4      	; 0x92 <RGB+0x12>
		PORTD |= (1 << PIND2);
  8e:	5a 9a       	sbi	0x0b, 2	; 11
  90:	01 c0       	rjmp	.+2      	; 0x94 <RGB+0x14>
	}
	else {
		PORTD &=~ (1 << PIND2);
  92:	5a 98       	cbi	0x0b, 2	; 11
	}
	

	if(blue > 0) {
  94:	44 23       	and	r20, r20
  96:	11 f0       	breq	.+4      	; 0x9c <RGB+0x1c>
		PORTD |= (1 << PIND4);
  98:	5c 9a       	sbi	0x0b, 4	; 11
  9a:	08 95       	ret
	}
	else {
		PORTD &=~ (1 << PIND4);
  9c:	5c 98       	cbi	0x0b, 4	; 11
  9e:	08 95       	ret

000000a0 <main>:
#include <avr/interrupt.h> 
#include <disco_functions.h>

int main(void) {
    while(1) {
		test();
  a0:	0e 94 53 00 	call	0xa6	; 0xa6 <test>
    }
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <main>

000000a6 <test>:
#include <avr/interrupt.h>
#include <disco_functions.h>

void test(void) {
	
	DDRD = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  aa:	1b b8       	out	0x0b, r1	; 11
	
	TCCR1B = 0x05;		//16 bit timer on scale 1024
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0;
  b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	char red = 255;
	char green = 0;
	char blue = 0;
	
	while(1) {
		if(TCNT1 >= 15625) {
  ba:	c4 e8       	ldi	r28, 0x84	; 132
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	88 81       	ld	r24, Y
  c0:	99 81       	ldd	r25, Y+1	; 0x01
  c2:	89 30       	cpi	r24, 0x09	; 9
  c4:	9d 43       	sbci	r25, 0x3D	; 61
  c6:	d8 f3       	brcs	.-10     	; 0xbe <test+0x18>
			TCNT1 = 0;
  c8:	19 82       	std	Y+1, r1	; 0x01
  ca:	18 82       	st	Y, r1
			RGB(red, green, blue);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	0e 94 40 00 	call	0x80	; 0x80 <RGB>
  d6:	f3 cf       	rjmp	.-26     	; 0xbe <test+0x18>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
