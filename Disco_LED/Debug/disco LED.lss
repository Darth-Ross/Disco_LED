
disco LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000117  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000179  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000192  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */ 
#include <Test.h>

int main(void) {
    while (1) {
		test();
  80:	0e 94 43 00 	call	0x86	; 0x86 <test>
    }
  84:	fd cf       	rjmp	.-6      	; 0x80 <main>

00000086 <test>:
#include <avr/io.h>
#include <avr/interrupt.h>

void test(void) {
	
	DDRC = 0b11111111;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00001100;
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0b00000000;
  8e:	1a b8       	out	0x0a, r1	; 10
	
	TCCR1B = 0b00000101;		//16 bit timer on scale 1024
  90:	95 e0       	ldi	r25, 0x05	; 5
  92:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0;
  96:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  9a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	EICRA = 0b00001100;			//External interrupt falling edge
  9e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000010;			//External interrupt int1 
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8d bb       	out	0x1d, r24	; 29
	
	sei();			//Enable interrupts
  a6:	78 94       	sei
		
	while(1) {
		
	}
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <test+0x22>

000000aa <__vector_2>:
} 

ISR(INT1_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	
	int teller; 
	TCNT1 = 0;
  c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  cc:	28 e0       	ldi	r18, 0x08	; 8
  ce:	30 e0       	ldi	r19, 0x00	; 0
	
	for(teller = 0; teller < 8; ) {
		if(TCNT1 > 7813) {
  d0:	e4 e8       	ldi	r30, 0x84	; 132
  d2:	f0 e0       	ldi	r31, 0x00	; 0
			teller++;
			TCNT1 = 0;
			PORTC ^= 1 << PINC5;
  d4:	40 e2       	ldi	r20, 0x20	; 32
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <__vector_2+0x48>
	
	int teller; 
	TCNT1 = 0;
	
	for(teller = 0; teller < 8; ) {
		if(TCNT1 > 7813) {
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	86 38       	cpi	r24, 0x86	; 134
  de:	9e 41       	sbci	r25, 0x1E	; 30
  e0:	d8 f3       	brcs	.-10     	; 0xd8 <__vector_2+0x2e>
			teller++;
			TCNT1 = 0;
  e2:	11 82       	std	Z+1, r1	; 0x01
  e4:	10 82       	st	Z, r1
			PORTC ^= 1 << PINC5;
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	84 27       	eor	r24, r20
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	31 09       	sbc	r19, r1
ISR(INT1_vect) {
	
	int teller; 
	TCNT1 = 0;
	
	for(teller = 0; teller < 8; ) {
  f0:	31 f0       	breq	.+12     	; 0xfe <__vector_2+0x54>
		if(TCNT1 > 7813) {
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	86 38       	cpi	r24, 0x86	; 134
  f8:	9e 41       	sbci	r25, 0x1E	; 30
  fa:	98 f7       	brcc	.-26     	; 0xe2 <__vector_2+0x38>
  fc:	ed cf       	rjmp	.-38     	; 0xd8 <__vector_2+0x2e>
			TCNT1 = 0;
			PORTC ^= 1 << PINC5;
		}
	}
	
	reti();
  fe:	18 95       	reti
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
