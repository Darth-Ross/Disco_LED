
disco LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000b6e  00000c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800132  00800132  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001373  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a4  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b27  00000000  00000000  0000258b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8d  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_4>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_14>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	70 02       	muls	r23, r16
  6a:	74 02       	muls	r23, r20
  6c:	6d 02       	muls	r22, r29
  6e:	03 03       	mulsu	r16, r19
  70:	7b 02       	muls	r23, r27
  72:	83 02       	muls	r24, r19
  74:	8b 02       	muls	r24, r27
  76:	93 02       	muls	r25, r19
  78:	9b 02       	muls	r25, r27
  7a:	a4 02       	muls	r26, r20
  7c:	ad 02       	muls	r26, r29
  7e:	03 03       	mulsu	r16, r19
  80:	b6 02       	muls	r27, r22
  82:	bf 02       	muls	r27, r31
  84:	c8 02       	muls	r28, r24
  86:	78 02       	muls	r23, r24
  88:	d1 02       	muls	r29, r17
  8a:	da 02       	muls	r29, r26
  8c:	e3 02       	muls	r30, r19
  8e:	03 03       	mulsu	r16, r19
  90:	ec 02       	muls	r30, r28
  92:	f4 02       	muls	r31, r20
  94:	fc 02       	muls	r31, r28

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	fb e0       	ldi	r31, 0x0B	; 11
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 33       	cpi	r26, 0x32	; 50
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a2 e3       	ldi	r26, 0x32	; 50
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 36       	cpi	r26, 0x61	; 97
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <main>
  cc:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <init100usTimer2>:
	TCCR0B = (1 << CS01) | (1 << CS00);
	TIMSK0 = (1 << OCIE0A);
	OCR0A = 125 * ((speed/1000000UL) >> 3) - 1;

	SREG = tmpSREG;
}
  d4:	af 92       	push	r10
  d6:	bf 92       	push	r11
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	cf b7       	in	r28, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	e2 e0       	ldi	r30, 0x02	; 2
  ec:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  f0:	f3 e0       	ldi	r31, 0x03	; 3
  f2:	f0 93 b1 00 	sts	0x00B1, r31	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  f6:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  fa:	68 94       	set
  fc:	aa 24       	eor	r10, r10
  fe:	a6 f8       	bld	r10, 6
 100:	0f 2e       	mov	r0, r31
 102:	f2 e4       	ldi	r31, 0x42	; 66
 104:	bf 2e       	mov	r11, r31
 106:	f0 2d       	mov	r31, r0
 108:	0f 2e       	mov	r0, r31
 10a:	ff e0       	ldi	r31, 0x0F	; 15
 10c:	cf 2e       	mov	r12, r31
 10e:	f0 2d       	mov	r31, r0
 110:	d1 2c       	mov	r13, r1
 112:	e1 2c       	mov	r14, r1
 114:	f1 2c       	mov	r15, r1
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	0e 94 19 05 	call	0xa32	; 0xa32 <__udivdi3>
 11e:	03 e0       	ldi	r16, 0x03	; 3
 120:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__lshrdi3>
 124:	89 e1       	ldi	r24, 0x19	; 25
 126:	28 9f       	mul	r18, r24
 128:	20 2d       	mov	r18, r0
 12a:	11 24       	eor	r1, r1
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 132:	cf bf       	out	0x3f, r28	; 63
 134:	78 94       	sei
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	bf 90       	pop	r11
 146:	af 90       	pop	r10
 148:	08 95       	ret

0000014a <__vector_7>:

//counts in microsecond increments
ISR(TIMER2_COMPA_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
  e_100microseconds++;
 166:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <e_100microseconds>
 16a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <e_100microseconds+0x1>
 16e:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <e_100microseconds+0x2>
 172:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <e_100microseconds+0x3>
 176:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <e_100microseconds+0x4>
 17a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <e_100microseconds+0x5>
 17e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <e_100microseconds+0x6>
 182:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <e_100microseconds+0x7>
 186:	a1 e0       	ldi	r26, 0x01	; 1
 188:	0e 94 94 05 	call	0xb28	; 0xb28 <__adddi3_s8>
 18c:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <e_100microseconds>
 190:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <e_100microseconds+0x1>
 194:	40 93 3c 01 	sts	0x013C, r20	; 0x80013c <e_100microseconds+0x2>
 198:	50 93 3d 01 	sts	0x013D, r21	; 0x80013d <e_100microseconds+0x3>
 19c:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <e_100microseconds+0x4>
 1a0:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <e_100microseconds+0x5>
 1a4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <e_100microseconds+0x6>
 1a8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <e_100microseconds+0x7>
}
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_14>:
//count millseconds
ISR(TIMER0_COMPA_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
  e_milliseconds++;
 1e4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <__data_end>
 1e8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <__data_end+0x1>
 1ec:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end+0x2>
 1f0:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <__data_end+0x3>
 1f4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__data_end+0x4>
 1f8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <__data_end+0x5>
 1fc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end+0x6>
 200:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x7>
 204:	a1 e0       	ldi	r26, 0x01	; 1
 206:	0e 94 94 05 	call	0xb28	; 0xb28 <__adddi3_s8>
 20a:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__data_end>
 20e:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <__data_end+0x1>
 212:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__data_end+0x2>
 216:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__data_end+0x3>
 21a:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__data_end+0x4>
 21e:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <__data_end+0x5>
 222:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x6>
 226:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x7>
}
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <initialise_ATmega328P>:
{
	/////////
	// I/0 //
	/////////

	DDRD = 0xFF;				// Set Port D as output
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;				// Set port B as output
 24a:	84 b9       	out	0x04, r24	; 4
	PORTD = 0;
 24c:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
 24e:	15 b8       	out	0x05, r1	; 5
	/////////////
	// Timer 0 //
	/////////////

	/* Set waveform generation mode to fast PWM */
	TCCR0A |= (1 << 0);			// Set WGM00 to 1
 250:	84 b5       	in	r24, 0x24	; 36
 252:	81 60       	ori	r24, 0x01	; 1
 254:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << 1);			// Set WGM01 to 1
 256:	84 b5       	in	r24, 0x24	; 36
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << 3);		// Set WGM02 to 0
 25c:	85 b5       	in	r24, 0x25	; 37
 25e:	87 7f       	andi	r24, 0xF7	; 247
 260:	85 bd       	out	0x25, r24	; 37
	
	/* Set compare output mode A to inverting */
	TCCR0A |= (1 << 6);			// Set COM0A0 to 1
 262:	84 b5       	in	r24, 0x24	; 36
 264:	80 64       	ori	r24, 0x40	; 64
 266:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << 7);			// Set COM0A1 to 1
 268:	84 b5       	in	r24, 0x24	; 36
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	84 bd       	out	0x24, r24	; 36
	
	/* Set compare output mode B to inverting */
	TCCR0A |= (1 << 4);			// Set COM0B0 to 1
 26e:	84 b5       	in	r24, 0x24	; 36
 270:	80 61       	ori	r24, 0x10	; 16
 272:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << 5);			// Set COM0B1 to 1
 274:	84 b5       	in	r24, 0x24	; 36
 276:	80 62       	ori	r24, 0x20	; 32
 278:	84 bd       	out	0x24, r24	; 36
	
	/* Setting prescaler to 64, PWM frequency is around 1kHz */
	TCCR0B |= (1 << 0);			// Set CS00 to 1
 27a:	85 b5       	in	r24, 0x25	; 37
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << 1);			// Set CS01 to 1
 280:	85 b5       	in	r24, 0x25	; 37
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << 2);		// Set CS02 to 0
 286:	85 b5       	in	r24, 0x25	; 37
 288:	8b 7f       	andi	r24, 0xFB	; 251
 28a:	85 bd       	out	0x25, r24	; 37
	/////////////
	// Timer 1 //
	/////////////
	
	/* Set waveform generation mode to fast PWM 8 bit */
	TCCR1A |= (1 << 0);			// Set WGM10 to 1
 28c:	a0 e8       	ldi	r26, 0x80	; 128
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	8c 91       	ld	r24, X
 292:	81 60       	ori	r24, 0x01	; 1
 294:	8c 93       	st	X, r24
	TCCR1A &= ~(1 << 1);		// Set WGM11 to 0
 296:	8c 91       	ld	r24, X
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	8c 93       	st	X, r24
	
	TCCR1B |= (1 << 3);			// Set WGM12 to 1
 29c:	e1 e8       	ldi	r30, 0x81	; 129
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 60       	ori	r24, 0x08	; 8
 2a4:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << 4);		// Set WGM13 to 0
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	80 83       	st	Z, r24
	
	/* Set compare output mode A to inverting */
	TCCR1A |= (1 << 6);			// Set COM1A0 to 1
 2ac:	8c 91       	ld	r24, X
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8c 93       	st	X, r24
	TCCR1A |= (1 << 7);			// Set COM1A1 to 1
 2b2:	8c 91       	ld	r24, X
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	8c 93       	st	X, r24
	
	/* Setting prescaler to 64, PWM frequency is around 1kHz */
	TCCR1B |= (1 << 0);			// Set CS10 to 1
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
	TCCR1B |= (1 << 1);			// Set CS11 to 1
 2be:	80 81       	ld	r24, Z
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << 2);		// Set CS12 to 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	80 83       	st	Z, r24
	
	/////////////
	// General //
	///////////// 
	
	TCNT0 = 0;
 2ca:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
 2cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	red_Value = 0;
 2d4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
	green_Value = 0;
 2d8:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
	blue_Value = 0;
 2dc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
 2e0:	08 95       	ret

000002e2 <display_RGB>:
{
	char PWM_RED;
	char PWM_GREEN;
	char PWM_BLUE;
	
	PWM_RED = 255 - red;
 2e2:	80 95       	com	r24
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	
 2e4:	40 95       	com	r20

	OCR0A = PWM_RED;
 2e6:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 2e8:	60 95       	com	r22
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR0B = PWM_BLUE;
 2f4:	48 bd       	out	0x28, r20	; 40
 2f6:	08 95       	ret

000002f8 <testRGB>:
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 2f8:	17 bc       	out	0x27, r1	; 39
	OCR1A = PWM_GREEN;
 2fa:	e8 e8       	ldi	r30, 0x88	; 136
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	31 83       	std	Z+1, r19	; 0x01
 304:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	4f ef       	ldi	r20, 0xFF	; 255
 30c:	59 e6       	ldi	r21, 0x69	; 105
 30e:	68 e1       	ldi	r22, 0x18	; 24
 310:	41 50       	subi	r20, 0x01	; 1
 312:	50 40       	sbci	r21, 0x00	; 0
 314:	60 40       	sbci	r22, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <testRGB+0x18>
 318:	00 c0       	rjmp	.+0      	; 0x31a <testRGB+0x22>
 31a:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 31c:	17 bc       	out	0x27, r1	; 39
	OCR1A = PWM_GREEN;
 31e:	4f e7       	ldi	r20, 0x7F	; 127
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	51 83       	std	Z+1, r21	; 0x01
 324:	40 83       	st	Z, r20
	OCR0B = PWM_BLUE;
 326:	88 bd       	out	0x28, r24	; 40
 328:	7f ef       	ldi	r23, 0xFF	; 255
 32a:	99 e6       	ldi	r25, 0x69	; 105
 32c:	a8 e1       	ldi	r26, 0x18	; 24
 32e:	71 50       	subi	r23, 0x01	; 1
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	a0 40       	sbci	r26, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <testRGB+0x36>
 336:	00 c0       	rjmp	.+0      	; 0x338 <testRGB+0x40>
 338:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 33a:	17 bc       	out	0x27, r1	; 39
	OCR1A = PWM_GREEN;
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	10 82       	st	Z, r1
	OCR0B = PWM_BLUE;
 340:	88 bd       	out	0x28, r24	; 40
 342:	bf ef       	ldi	r27, 0xFF	; 255
 344:	69 e6       	ldi	r22, 0x69	; 105
 346:	78 e1       	ldi	r23, 0x18	; 24
 348:	b1 50       	subi	r27, 0x01	; 1
 34a:	60 40       	sbci	r22, 0x00	; 0
 34c:	70 40       	sbci	r23, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <testRGB+0x50>
 350:	00 c0       	rjmp	.+0      	; 0x352 <testRGB+0x5a>
 352:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 354:	9f e7       	ldi	r25, 0x7F	; 127
 356:	97 bd       	out	0x27, r25	; 39
	OCR1A = PWM_GREEN;
 358:	11 82       	std	Z+1, r1	; 0x01
 35a:	10 82       	st	Z, r1
	OCR0B = PWM_BLUE;
 35c:	88 bd       	out	0x28, r24	; 40
 35e:	af ef       	ldi	r26, 0xFF	; 255
 360:	b9 e6       	ldi	r27, 0x69	; 105
 362:	68 e1       	ldi	r22, 0x18	; 24
 364:	a1 50       	subi	r26, 0x01	; 1
 366:	b0 40       	sbci	r27, 0x00	; 0
 368:	60 40       	sbci	r22, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <testRGB+0x6c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <testRGB+0x76>
 36e:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 370:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 372:	11 82       	std	Z+1, r1	; 0x01
 374:	10 82       	st	Z, r1
	OCR0B = PWM_BLUE;
 376:	98 bd       	out	0x28, r25	; 40
 378:	7f ef       	ldi	r23, 0xFF	; 255
 37a:	a9 e6       	ldi	r26, 0x69	; 105
 37c:	b8 e1       	ldi	r27, 0x18	; 24
 37e:	71 50       	subi	r23, 0x01	; 1
 380:	a0 40       	sbci	r26, 0x00	; 0
 382:	b0 40       	sbci	r27, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <testRGB+0x86>
 386:	00 c0       	rjmp	.+0      	; 0x388 <testRGB+0x90>
 388:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 38a:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 38c:	11 82       	std	Z+1, r1	; 0x01
 38e:	10 82       	st	Z, r1
	OCR0B = PWM_BLUE;
 390:	18 bc       	out	0x28, r1	; 40
 392:	6f ef       	ldi	r22, 0xFF	; 255
 394:	79 e6       	ldi	r23, 0x69	; 105
 396:	a8 e1       	ldi	r26, 0x18	; 24
 398:	61 50       	subi	r22, 0x01	; 1
 39a:	70 40       	sbci	r23, 0x00	; 0
 39c:	a0 40       	sbci	r26, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <testRGB+0xa0>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <testRGB+0xaa>
 3a2:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 3a4:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 3a6:	51 83       	std	Z+1, r21	; 0x01
 3a8:	40 83       	st	Z, r20
	OCR0B = PWM_BLUE;
 3aa:	18 bc       	out	0x28, r1	; 40
 3ac:	bf ef       	ldi	r27, 0xFF	; 255
 3ae:	69 e6       	ldi	r22, 0x69	; 105
 3b0:	78 e1       	ldi	r23, 0x18	; 24
 3b2:	b1 50       	subi	r27, 0x01	; 1
 3b4:	60 40       	sbci	r22, 0x00	; 0
 3b6:	70 40       	sbci	r23, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <testRGB+0xba>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <testRGB+0xc4>
 3bc:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 3be:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 3c0:	31 83       	std	Z+1, r19	; 0x01
 3c2:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 3c4:	18 bc       	out	0x28, r1	; 40
 3c6:	af ef       	ldi	r26, 0xFF	; 255
 3c8:	b9 e6       	ldi	r27, 0x69	; 105
 3ca:	68 e1       	ldi	r22, 0x18	; 24
 3cc:	a1 50       	subi	r26, 0x01	; 1
 3ce:	b0 40       	sbci	r27, 0x00	; 0
 3d0:	60 40       	sbci	r22, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <testRGB+0xd4>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <testRGB+0xde>
 3d6:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 3d8:	60 e8       	ldi	r22, 0x80	; 128
 3da:	67 bd       	out	0x27, r22	; 39
	OCR1A = PWM_GREEN;
 3dc:	31 83       	std	Z+1, r19	; 0x01
 3de:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 3e0:	18 bc       	out	0x28, r1	; 40
 3e2:	7f ef       	ldi	r23, 0xFF	; 255
 3e4:	a9 e6       	ldi	r26, 0x69	; 105
 3e6:	b8 e1       	ldi	r27, 0x18	; 24
 3e8:	71 50       	subi	r23, 0x01	; 1
 3ea:	a0 40       	sbci	r26, 0x00	; 0
 3ec:	b0 40       	sbci	r27, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <testRGB+0xf0>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <testRGB+0xfa>
 3f2:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 3f4:	17 bc       	out	0x27, r1	; 39
	OCR1A = PWM_GREEN;
 3f6:	31 83       	std	Z+1, r19	; 0x01
 3f8:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 3fa:	18 bc       	out	0x28, r1	; 40
 3fc:	7f ef       	ldi	r23, 0xFF	; 255
 3fe:	a9 e6       	ldi	r26, 0x69	; 105
 400:	b8 e1       	ldi	r27, 0x18	; 24
 402:	71 50       	subi	r23, 0x01	; 1
 404:	a0 40       	sbci	r26, 0x00	; 0
 406:	b0 40       	sbci	r27, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 40e:	17 bc       	out	0x27, r1	; 39
	OCR1A = PWM_GREEN;
 410:	31 83       	std	Z+1, r19	; 0x01
 412:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 414:	68 bd       	out	0x28, r22	; 40
 416:	6f ef       	ldi	r22, 0xFF	; 255
 418:	79 e6       	ldi	r23, 0x69	; 105
 41a:	a8 e1       	ldi	r26, 0x18	; 24
 41c:	61 50       	subi	r22, 0x01	; 1
 41e:	70 40       	sbci	r23, 0x00	; 0
 420:	a0 40       	sbci	r26, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 428:	97 bd       	out	0x27, r25	; 39
	OCR1A = PWM_GREEN;
 42a:	51 83       	std	Z+1, r21	; 0x01
 42c:	40 83       	st	Z, r20
	OCR0B = PWM_BLUE;
 42e:	98 bd       	out	0x28, r25	; 40
 430:	bf ef       	ldi	r27, 0xFF	; 255
 432:	49 e6       	ldi	r20, 0x69	; 105
 434:	58 e1       	ldi	r21, 0x18	; 24
 436:	b1 50       	subi	r27, 0x01	; 1
 438:	40 40       	sbci	r20, 0x00	; 0
 43a:	50 40       	sbci	r21, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 440:	00 00       	nop
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 442:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 444:	31 83       	std	Z+1, r19	; 0x01
 446:	20 83       	st	Z, r18
	OCR0B = PWM_BLUE;
 448:	88 bd       	out	0x28, r24	; 40
 44a:	08 95       	ret

0000044c <brightness>:
}

// Make safety for underflow or overflow
void brightness(char select)
{
	if(select == 1)
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	b1 f4       	brne	.+44     	; 0x47c <brightness+0x30>
	{
		if(red_Value > 0)
 450:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <red_Value>
 454:	88 23       	and	r24, r24
 456:	19 f0       	breq	.+6      	; 0x45e <brightness+0x12>
		{
			red_Value+=10;
 458:	86 5f       	subi	r24, 0xF6	; 246
 45a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
		}
		
		if(green_Value > 0)
 45e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <green_Value>
 462:	88 23       	and	r24, r24
 464:	19 f0       	breq	.+6      	; 0x46c <brightness+0x20>
		{
			green_Value+=10;
 466:	86 5f       	subi	r24, 0xF6	; 246
 468:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
		}
		
		if(blue_Value > 0)
 46c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <blue_Value>
 470:	88 23       	and	r24, r24
 472:	c9 f0       	breq	.+50     	; 0x4a6 <brightness+0x5a>
		{
			blue_Value+=10;
 474:	86 5f       	subi	r24, 0xF6	; 246
 476:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
 47a:	08 95       	ret
		}
		
	}
	else
	{
		if(red_Value > 0)
 47c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <red_Value>
 480:	88 23       	and	r24, r24
 482:	19 f0       	breq	.+6      	; 0x48a <brightness+0x3e>
		{
			red_Value-=10;
 484:	8a 50       	subi	r24, 0x0A	; 10
 486:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
		}
		
		if(green_Value > 0)
 48a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <green_Value>
 48e:	88 23       	and	r24, r24
 490:	19 f0       	breq	.+6      	; 0x498 <brightness+0x4c>
		{
			green_Value-=10;
 492:	8a 50       	subi	r24, 0x0A	; 10
 494:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
		}
		
		if(blue_Value > 0)
 498:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <blue_Value>
 49c:	88 23       	and	r24, r24
 49e:	19 f0       	breq	.+6      	; 0x4a6 <brightness+0x5a>
		{
			blue_Value-=10;
 4a0:	8a 50       	subi	r24, 0x0A	; 10
 4a2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
 4a6:	08 95       	ret

000004a8 <systemControl>:
	
	PWM_RED = 255 - red;
	PWM_GREEN = 255 - green;
	PWM_BLUE = 255 - blue;	

	OCR0A = PWM_RED;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	87 bd       	out	0x27, r24	; 39
	OCR1A = PWM_GREEN;
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4b4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR0B = PWM_BLUE;
 4b8:	88 bd       	out	0x28, r24	; 40
	commandAction command;
	display_RGB(0,0,0);
	
	while(command != ON)
	{
		command = getIRCommandRec();
 4ba:	0e 94 45 03 	call	0x68a	; 0x68a <getIRCommandRec>
void systemControl(void)
{
	commandAction command;
	display_RGB(0,0,0);
	
	while(command != ON)
 4be:	8f 31       	cpi	r24, 0x1F	; 31
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <systemControl+0x12>
	{
		command = getIRCommandRec();
	}
}
 4c2:	08 95       	ret

000004c4 <getCommand>:

// ALLE COMMANDS AANMAKEN
void getCommand(commandAction command) 
{
	switch(command) {
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	7c 97       	sbiw	r30, 0x1c	; 28
 4ca:	e7 31       	cpi	r30, 0x17	; 23
 4cc:	f1 05       	cpc	r31, r1
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <getCommand+0xe>
 4d0:	9a c0       	rjmp	.+308    	; 0x606 <getCommand+0x142>
 4d2:	ec 5c       	subi	r30, 0xCC	; 204
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
		
		case OFF:
			systemControl();
 4da:	0e 94 54 02 	call	0x4a8	; 0x4a8 <systemControl>
			break;
 4de:	08 95       	ret
		
		case BPLUS:
			brightness(1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 26 02 	call	0x44c	; 0x44c <brightness>
			break;
 4e6:	08 95       	ret
		
		case BMIN:
			brightness(0);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 26 02 	call	0x44c	; 0x44c <brightness>
			break;
 4ee:	08 95       	ret
		case FLASH:
			// Functie invullen
			break;
		
		case STROBE:
			testRGB();
 4f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <testRGB>
			break;
 4f4:	08 95       	ret
			// Functie invullen
			break;
			
			// Red
		case R:
			red_Value = 255;
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 0;
 4fc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
			blue_Value = 0;
 500:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 504:	08 95       	ret
			
			// Green
		case G:
			red_Value = 0;
 506:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 255;
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 510:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 514:	08 95       	ret
			
			// Blue
		case B:
			red_Value = 0;
 516:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 0;
 51a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
			blue_Value = 255;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 524:	08 95       	ret
			
			// White
		case W:
			red_Value = 255;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 255;
 52c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 255;
 530:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 534:	08 95       	ret
				
			// Orange-red
		case B1:
			red_Value = 255;
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 64;
 53c:	80 e4       	ldi	r24, 0x40	; 64
 53e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 542:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 546:	08 95       	ret
		 
			// Green-blue
		case B2:
			red_Value = 0;
 548:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 255;
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 64;
 552:	80 e4       	ldi	r24, 0x40	; 64
 554:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 558:	08 95       	ret
		
			// Blue-red
		case B3:
			red_Value = 64;
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 255;
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 566:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 56a:	08 95       	ret
		
			// Orange
		case B4:
			red_Value = 255;
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 128;
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 578:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 57c:	08 95       	ret
		
			// Cyan 3
		case B5:
			red_Value = 0;
 57e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 255;
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 128;
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 58e:	08 95       	ret
		
			// Purple 1
		case B6:
			red_Value = 128;
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 0;
 596:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
			blue_Value = 255;
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 5a0:	08 95       	ret
		
			// Orange 2
		case B7:
			red_Value = 255;
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 191;
 5a8:	8f eb       	ldi	r24, 0xBF	; 191
 5aa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 5ae:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;	
 5b2:	08 95       	ret
		
			// Cyan 2
		case B8:
			red_Value = 0;
 5b4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 255;
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 191;
 5be:	8f eb       	ldi	r24, 0xBF	; 191
 5c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 5c4:	08 95       	ret
		
			// Purple 2
		case B9:
			red_Value = 191;
 5c6:	8f eb       	ldi	r24, 0xBF	; 191
 5c8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 0;
 5cc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
			blue_Value = 255;
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 5d6:	08 95       	ret
		
			//	Yellow
		case B10:
			red_Value = 255;
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 255;
 5de:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 0;
 5e2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blue_Value>
			break;
 5e6:	08 95       	ret
		
			// Cyan 1
		case B11:
			red_Value = 0;
 5e8:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <red_Value>
			green_Value = 255;
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <green_Value>
			blue_Value = 255;
 5f2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
			break;
 5f6:	08 95       	ret
		
			// Magenta
		case B12:
			red_Value = 255;
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <red_Value>
			green_Value = 0;
 5fe:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <green_Value>
			blue_Value = 255;
 602:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <blue_Value>
 606:	08 95       	ret

00000608 <initIR>:
	commandTemplate *remoteCommands;
} ir;

//will setup counters, and pin interrupt
void initIR(uint8_t pinNumber, uint16_t address, commandTemplate *commands)
{
 608:	9a 01       	movw	r18, r20
	uint8_t tmpSREG = 0;

	tmpSREG = SREG;
 60a:	5f b7       	in	r21, 0x3f	; 63
	cli();
 60c:	f8 94       	cli

	//setup initial values for IR_DATA
	ir.receiverAddress = address;
 60e:	e5 e4       	ldi	r30, 0x45	; 69
 610:	f1 e0       	ldi	r31, 0x01	; 1
 612:	77 8b       	std	Z+23, r23	; 0x17
 614:	66 8b       	std	Z+22, r22	; 0x16
	ir.decodingStates = START;
 616:	10 82       	st	Z, r1
	ir.dataBuffer = 0;
 618:	12 8a       	std	Z+18, r1	; 0x12
 61a:	13 8a       	std	Z+19, r1	; 0x13
 61c:	14 8a       	std	Z+20, r1	; 0x14
 61e:	15 8a       	std	Z+21, r1	; 0x15
	ir.timePassed = 0;
 620:	12 82       	std	Z+2, r1	; 0x02
 622:	13 82       	std	Z+3, r1	; 0x03
 624:	14 82       	std	Z+4, r1	; 0x04
 626:	15 82       	std	Z+5, r1	; 0x05
 628:	16 82       	std	Z+6, r1	; 0x06
 62a:	17 82       	std	Z+7, r1	; 0x07
 62c:	10 86       	std	Z+8, r1	; 0x08
 62e:	11 86       	std	Z+9, r1	; 0x09
	ir.timeStart = 0;
 630:	12 86       	std	Z+10, r1	; 0x0a
 632:	13 86       	std	Z+11, r1	; 0x0b
 634:	14 86       	std	Z+12, r1	; 0x0c
 636:	15 86       	std	Z+13, r1	; 0x0d
 638:	16 86       	std	Z+14, r1	; 0x0e
 63a:	17 86       	std	Z+15, r1	; 0x0f
 63c:	10 8a       	std	Z+16, r1	; 0x10
 63e:	11 8a       	std	Z+17, r1	; 0x11
	ir.shiftCount = 0;
 640:	10 8e       	std	Z+24, r1	; 0x18
	ir.receivingData = FLAG_OFF;
 642:	ae e5       	ldi	r26, 0x5E	; 94
 644:	b1 e0       	ldi	r27, 0x01	; 1
 646:	9c 91       	ld	r25, X
	ir.repeatCMD = FLAG_OFF;
 648:	9e 7f       	andi	r25, 0xFE	; 254
 64a:	9d 7f       	andi	r25, 0xFD	; 253
 64c:	9c 93       	st	X, r25
	ir.pinNumber = pinNumber;
 64e:	81 83       	std	Z+1, r24	; 0x01
	ir.remoteCommands = commands;
 650:	33 8f       	std	Z+27, r19	; 0x1b
 652:	22 8f       	std	Z+26, r18	; 0x1a
	//setup change of pin state interrupt
	DDRC &= ~(1 << ir.pinNumber);
 654:	47 b1       	in	r20, 0x07	; 7
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	b9 01       	movw	r22, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <initIR+0x5a>
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <initIR+0x56>
 666:	cb 01       	movw	r24, r22
 668:	96 2f       	mov	r25, r22
 66a:	90 95       	com	r25
 66c:	94 23       	and	r25, r20
 66e:	97 b9       	out	0x07, r25	; 7
	PCICR |= (1 << PCIE1);
 670:	e8 e6       	ldi	r30, 0x68	; 104
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	90 81       	ld	r25, Z
 676:	92 60       	ori	r25, 0x02	; 2
 678:	90 83       	st	Z, r25
	PCMSK1 |= (1 << ir.pinNumber);
 67a:	ec e6       	ldi	r30, 0x6C	; 108
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	90 81       	ld	r25, Z
 680:	89 2b       	or	r24, r25
 682:	80 83       	st	Z, r24

	SREG = tmpSREG;
 684:	5f bf       	out	0x3f, r21	; 63

	sei();
 686:	78 94       	sei
 688:	08 95       	ret

0000068a <getIRCommandRec>:
}

//checks for valid address and a valid command, if found returns command
commandAction getIRCommandRec()
{
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
	uint8_t buffSREG = SREG;
 68e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 690:	f8 94       	cli

	if (ir.receivingData == FLAG_ON)
 692:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ir+0x19>
 696:	80 ff       	sbrs	r24, 0
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <getIRCommandRec+0x16>
	{
		SREG = buffSREG;
 69a:	9f bf       	out	0x3f, r25	; 63
		return NO_ACTION;
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	4d c0       	rjmp	.+154    	; 0x73a <getIRCommandRec+0xb0>
	}
	if (ir.repeatCMD == FLAG_ON)
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <getIRCommandRec+0x2a>
	{
		ir.repeatCMD = FLAG_OFF;
 6a4:	ee e5       	ldi	r30, 0x5E	; 94
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
 6a8:	80 81       	ld	r24, Z
 6aa:	8d 7f       	andi	r24, 0xFD	; 253
 6ac:	80 83       	st	Z, r24
		SREG = buffSREG;
 6ae:	9f bf       	out	0x3f, r25	; 63
		return CMD_REPEAT;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	43 c0       	rjmp	.+134    	; 0x73a <getIRCommandRec+0xb0>
	}

	//save start point of pointer
	commandTemplate *startPointer = ir.remoteCommands;
 6b4:	e5 e4       	ldi	r30, 0x45	; 69
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	a2 8d       	ldd	r26, Z+26	; 0x1a
 6ba:	b3 8d       	ldd	r27, Z+27	; 0x1b
	uint8_t address8bit = ir.dataBuffer & MASK_16BIT_FF;
 6bc:	42 89       	ldd	r20, Z+18	; 0x12
 6be:	53 89       	ldd	r21, Z+19	; 0x13
 6c0:	64 89       	ldd	r22, Z+20	; 0x14
 6c2:	75 89       	ldd	r23, Z+21	; 0x15
	uint8_t address8bitINV = ~(ir.dataBuffer >> 8) & MASK_16BIT_FF;
	uint16_t address16bit = ir.dataBuffer & MASK_16BIT_FFFF;

	if((address16bit == ir.receiverAddress) || ((address8bit == address8bitINV) && (address8bit == ir.receiverAddress)))
 6c4:	26 89       	ldd	r18, Z+22	; 0x16
 6c6:	37 89       	ldd	r19, Z+23	; 0x17
 6c8:	24 17       	cp	r18, r20
 6ca:	35 07       	cpc	r19, r21
 6cc:	49 f0       	breq	.+18     	; 0x6e0 <getIRCommandRec+0x56>
 6ce:	85 2f       	mov	r24, r21
 6d0:	80 95       	com	r24
 6d2:	84 13       	cpse	r24, r20
 6d4:	2c c0       	rjmp	.+88     	; 0x72e <getIRCommandRec+0xa4>
 6d6:	e4 2f       	mov	r30, r20
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	2e 17       	cp	r18, r30
 6dc:	3f 07       	cpc	r19, r31
 6de:	39 f5       	brne	.+78     	; 0x72e <getIRCommandRec+0xa4>
	{

		uint8_t command = (ir.dataBuffer >> 16) & MASK_16BIT_FF;
 6e0:	26 2f       	mov	r18, r22
		uint8_t commandINV = ~(ir.dataBuffer >> 24) & MASK_16BIT_FF;
		if(command == commandINV)
 6e2:	87 2f       	mov	r24, r23
 6e4:	80 95       	com	r24
 6e6:	68 13       	cpse	r22, r24
 6e8:	22 c0       	rjmp	.+68     	; 0x72e <getIRCommandRec+0xa4>
		{
			//loop till last command which is NO_ACTION
			while(ir.remoteCommands->action != NO_ACTION)
 6ea:	11 96       	adiw	r26, 0x01	; 1
 6ec:	8c 91       	ld	r24, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	88 23       	and	r24, r24
 6f2:	e9 f0       	breq	.+58     	; 0x72e <getIRCommandRec+0xa4>
			{
				if(command == ir.remoteCommands->command)
 6f4:	8c 91       	ld	r24, X
 6f6:	68 17       	cp	r22, r24
 6f8:	41 f0       	breq	.+16     	; 0x70a <getIRCommandRec+0x80>
 6fa:	fd 01       	movw	r30, r26
					commandAction tempAction = ir.remoteCommands->action;
					ir.remoteCommands = startPointer;
					SREG = buffSREG;
					return tempAction;
				}
				ir.remoteCommands++;
 6fc:	c5 e4       	ldi	r28, 0x45	; 69
 6fe:	d1 e0       	ldi	r29, 0x01	; 1
 700:	10 c0       	rjmp	.+32     	; 0x722 <getIRCommandRec+0x98>
		if(command == commandINV)
		{
			//loop till last command which is NO_ACTION
			while(ir.remoteCommands->action != NO_ACTION)
			{
				if(command == ir.remoteCommands->command)
 702:	80 81       	ld	r24, Z
 704:	28 13       	cpse	r18, r24
 706:	0d c0       	rjmp	.+26     	; 0x722 <getIRCommandRec+0x98>
 708:	01 c0       	rjmp	.+2      	; 0x70c <getIRCommandRec+0x82>
		uint8_t command = (ir.dataBuffer >> 16) & MASK_16BIT_FF;
		uint8_t commandINV = ~(ir.dataBuffer >> 24) & MASK_16BIT_FF;
		if(command == commandINV)
		{
			//loop till last command which is NO_ACTION
			while(ir.remoteCommands->action != NO_ACTION)
 70a:	fd 01       	movw	r30, r26
			{
				if(command == ir.remoteCommands->command)
				{
					ir.dataBuffer = 0;
 70c:	c5 e4       	ldi	r28, 0x45	; 69
 70e:	d1 e0       	ldi	r29, 0x01	; 1
 710:	1a 8a       	std	Y+18, r1	; 0x12
 712:	1b 8a       	std	Y+19, r1	; 0x13
 714:	1c 8a       	std	Y+20, r1	; 0x14
 716:	1d 8a       	std	Y+21, r1	; 0x15
					commandAction tempAction = ir.remoteCommands->action;
 718:	81 81       	ldd	r24, Z+1	; 0x01
					ir.remoteCommands = startPointer;
 71a:	bb 8f       	std	Y+27, r27	; 0x1b
 71c:	aa 8f       	std	Y+26, r26	; 0x1a
					SREG = buffSREG;
 71e:	9f bf       	out	0x3f, r25	; 63
					return tempAction;
 720:	0c c0       	rjmp	.+24     	; 0x73a <getIRCommandRec+0xb0>
				}
				ir.remoteCommands++;
 722:	32 96       	adiw	r30, 0x02	; 2
 724:	fb 8f       	std	Y+27, r31	; 0x1b
 726:	ea 8f       	std	Y+26, r30	; 0x1a
		uint8_t command = (ir.dataBuffer >> 16) & MASK_16BIT_FF;
		uint8_t commandINV = ~(ir.dataBuffer >> 24) & MASK_16BIT_FF;
		if(command == commandINV)
		{
			//loop till last command which is NO_ACTION
			while(ir.remoteCommands->action != NO_ACTION)
 728:	81 81       	ldd	r24, Z+1	; 0x01
 72a:	81 11       	cpse	r24, r1
 72c:	ea cf       	rjmp	.-44     	; 0x702 <getIRCommandRec+0x78>
				}
				ir.remoteCommands++;
			}
		}
	}
	ir.remoteCommands = startPointer;
 72e:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <ir+0x1b>
 732:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <ir+0x1a>
	SREG = buffSREG;
 736:	9f bf       	out	0x3f, r25	; 63
	return NO_ACTION;
 738:	80 e0       	ldi	r24, 0x00	; 0
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <__vector_4>:

//attached to IR decoder and activated on change of state
ISR(PCINT1_vect)
{
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	6f 92       	push	r6
 74c:	7f 92       	push	r7
 74e:	8f 92       	push	r8
 750:	9f 92       	push	r9
 752:	af 92       	push	r10
 754:	bf 92       	push	r11
 756:	cf 92       	push	r12
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	4f 93       	push	r20
 768:	5f 93       	push	r21
 76a:	6f 93       	push	r22
 76c:	7f 93       	push	r23
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	ef 93       	push	r30
 77c:	ff 93       	push	r31
	uint8_t pinState = (PINC & (1 << ir.pinNumber)) >> ir.pinNumber;
 77e:	26 b1       	in	r18, 0x06	; 6
 780:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <ir+0x1>

	//tests for low state, meaning a high to low transition has occurred
	if (pinState == LOW)
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	04 2e       	mov	r0, r20
 78a:	02 c0       	rjmp	.+4      	; 0x790 <__vector_4+0x50>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <__vector_4+0x4c>
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	82 23       	and	r24, r18
 798:	93 23       	and	r25, r19
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__vector_4+0x60>
 79c:	95 95       	asr	r25
 79e:	87 95       	ror	r24
 7a0:	4a 95       	dec	r20
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <__vector_4+0x5c>
 7a4:	81 11       	cpse	r24, r1
 7a6:	54 c0       	rjmp	.+168    	; 0x850 <__vector_4+0x110>
	{
		ir.timePassed = e_100microseconds - ir.timeStart;
 7a8:	60 90 3a 01 	lds	r6, 0x013A	; 0x80013a <e_100microseconds>
 7ac:	70 90 3b 01 	lds	r7, 0x013B	; 0x80013b <e_100microseconds+0x1>
 7b0:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <e_100microseconds+0x2>
 7b4:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <e_100microseconds+0x3>
 7b8:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <e_100microseconds+0x4>
 7bc:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <e_100microseconds+0x5>
 7c0:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <e_100microseconds+0x6>
 7c4:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <e_100microseconds+0x7>
 7c8:	e5 e4       	ldi	r30, 0x45	; 69
 7ca:	f1 e0       	ldi	r31, 0x01	; 1
 7cc:	26 2d       	mov	r18, r6
 7ce:	37 2d       	mov	r19, r7
 7d0:	48 2d       	mov	r20, r8
 7d2:	59 2d       	mov	r21, r9
 7d4:	6d 2f       	mov	r22, r29
 7d6:	7c 2f       	mov	r23, r28
 7d8:	8b 2f       	mov	r24, r27
 7da:	9a 2f       	mov	r25, r26
 7dc:	a2 84       	ldd	r10, Z+10	; 0x0a
 7de:	b3 84       	ldd	r11, Z+11	; 0x0b
 7e0:	c4 84       	ldd	r12, Z+12	; 0x0c
 7e2:	d5 84       	ldd	r13, Z+13	; 0x0d
 7e4:	e6 84       	ldd	r14, Z+14	; 0x0e
 7e6:	f7 84       	ldd	r15, Z+15	; 0x0f
 7e8:	00 89       	ldd	r16, Z+16	; 0x10
 7ea:	11 89       	ldd	r17, Z+17	; 0x11
 7ec:	0e 94 a0 05 	call	0xb40	; 0xb40 <__subdi3>
 7f0:	22 83       	std	Z+2, r18	; 0x02
 7f2:	33 83       	std	Z+3, r19	; 0x03
 7f4:	44 83       	std	Z+4, r20	; 0x04
 7f6:	55 83       	std	Z+5, r21	; 0x05
 7f8:	66 83       	std	Z+6, r22	; 0x06
 7fa:	77 83       	std	Z+7, r23	; 0x07
 7fc:	80 87       	std	Z+8, r24	; 0x08
 7fe:	91 87       	std	Z+9, r25	; 0x09

		if(ir.timePassed > PACKET_TIME)
 800:	2e 37       	cpi	r18, 0x7E	; 126
 802:	34 40       	sbci	r19, 0x04	; 4
 804:	41 05       	cpc	r20, r1
 806:	51 05       	cpc	r21, r1
 808:	61 05       	cpc	r22, r1
 80a:	71 05       	cpc	r23, r1
 80c:	81 05       	cpc	r24, r1
 80e:	91 05       	cpc	r25, r1
 810:	51 f0       	breq	.+20     	; 0x826 <__vector_4+0xe6>
 812:	48 f0       	brcs	.+18     	; 0x826 <__vector_4+0xe6>
		{
			ir.shiftCount = 0;
 814:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <ir+0x18>
			ir.receivingData = FLAG_OFF;
 818:	ee e5       	ldi	r30, 0x5E	; 94
 81a:	f1 e0       	ldi	r31, 0x01	; 1
 81c:	80 81       	ld	r24, Z
			ir.repeatCMD = FLAG_OFF;
 81e:	8e 7f       	andi	r24, 0xFE	; 254
 820:	8d 7f       	andi	r24, 0xFD	; 253
 822:	80 83       	st	Z, r24
 824:	07 c0       	rjmp	.+14     	; 0x834 <__vector_4+0xf4>
			ir.decodingStates = START;
		}

		switch(ir.decodingStates)
 826:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ir>
 82a:	88 23       	and	r24, r24
 82c:	19 f0       	breq	.+6      	; 0x834 <__vector_4+0xf4>
 82e:	82 30       	cpi	r24, 0x02	; 2
 830:	21 f0       	breq	.+8      	; 0x83a <__vector_4+0xfa>
 832:	b8 c0       	rjmp	.+368    	; 0x9a4 <__stack+0xa5>
		{
		case START:
			ir.decodingStates = SKIP;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ir>
		case EVAL:
			ir.timeStart = e_100microseconds;
 83a:	e5 e4       	ldi	r30, 0x45	; 69
 83c:	f1 e0       	ldi	r31, 0x01	; 1
 83e:	62 86       	std	Z+10, r6	; 0x0a
 840:	73 86       	std	Z+11, r7	; 0x0b
 842:	84 86       	std	Z+12, r8	; 0x0c
 844:	95 86       	std	Z+13, r9	; 0x0d
 846:	d6 87       	std	Z+14, r29	; 0x0e
 848:	c7 87       	std	Z+15, r28	; 0x0f
 84a:	b0 8b       	std	Z+16, r27	; 0x10
 84c:	a1 8b       	std	Z+17, r26	; 0x11
 84e:	aa c0       	rjmp	.+340    	; 0x9a4 <__stack+0xa5>
			break;
		}
	}
	else
	{	//since pin must be high, check state machine as to what action to perform
		switch(ir.decodingStates)
 850:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ir>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	19 f0       	breq	.+6      	; 0x85e <__vector_4+0x11e>
 858:	82 30       	cpi	r24, 0x02	; 2
 85a:	29 f0       	breq	.+10     	; 0x866 <__vector_4+0x126>
 85c:	a3 c0       	rjmp	.+326    	; 0x9a4 <__stack+0xa5>
		{
		case SKIP:
			ir.decodingStates = EVAL;
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ir>
			break;
 864:	9f c0       	rjmp	.+318    	; 0x9a4 <__stack+0xa5>
		case EVAL:
			if(ir.timePassed > AGC_BURST)
 866:	e5 e4       	ldi	r30, 0x45	; 69
 868:	f1 e0       	ldi	r31, 0x01	; 1
 86a:	62 80       	ldd	r6, Z+2	; 0x02
 86c:	73 80       	ldd	r7, Z+3	; 0x03
 86e:	84 80       	ldd	r8, Z+4	; 0x04
 870:	95 80       	ldd	r9, Z+5	; 0x05
 872:	d6 81       	ldd	r29, Z+6	; 0x06
 874:	c7 81       	ldd	r28, Z+7	; 0x07
 876:	b0 85       	ldd	r27, Z+8	; 0x08
 878:	e1 85       	ldd	r30, Z+9	; 0x09
 87a:	26 2d       	mov	r18, r6
 87c:	37 2d       	mov	r19, r7
 87e:	48 2d       	mov	r20, r8
 880:	59 2d       	mov	r21, r9
 882:	6d 2f       	mov	r22, r29
 884:	7c 2f       	mov	r23, r28
 886:	8b 2f       	mov	r24, r27
 888:	9e 2f       	mov	r25, r30
 88a:	22 38       	cpi	r18, 0x82	; 130
 88c:	31 05       	cpc	r19, r1
 88e:	41 05       	cpc	r20, r1
 890:	51 05       	cpc	r21, r1
 892:	61 05       	cpc	r22, r1
 894:	71 05       	cpc	r23, r1
 896:	81 05       	cpc	r24, r1
 898:	91 05       	cpc	r25, r1
 89a:	41 f0       	breq	.+16     	; 0x8ac <__vector_4+0x16c>
 89c:	38 f0       	brcs	.+14     	; 0x8ac <__vector_4+0x16c>
			{
				ir.receivingData = FLAG_ON;
 89e:	ee e5       	ldi	r30, 0x5E	; 94
 8a0:	f1 e0       	ldi	r31, 0x01	; 1
 8a2:	80 81       	ld	r24, Z
				ir.repeatCMD = FLAG_OFF;
 8a4:	81 60       	ori	r24, 0x01	; 1
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	80 83       	st	Z, r24
 8aa:	6f c0       	rjmp	.+222    	; 0x98a <__stack+0x8b>
			}
			else if (ir.timePassed > REPEAT_TIME)
 8ac:	26 2d       	mov	r18, r6
 8ae:	37 2d       	mov	r19, r7
 8b0:	48 2d       	mov	r20, r8
 8b2:	59 2d       	mov	r21, r9
 8b4:	6d 2f       	mov	r22, r29
 8b6:	7c 2f       	mov	r23, r28
 8b8:	8b 2f       	mov	r24, r27
 8ba:	9e 2f       	mov	r25, r30
 8bc:	ae e6       	ldi	r26, 0x6E	; 110
 8be:	0e 94 a9 05 	call	0xb52	; 0xb52 <__cmpdi2_s8>
 8c2:	51 f0       	breq	.+20     	; 0x8d8 <__vector_4+0x198>
 8c4:	48 f0       	brcs	.+18     	; 0x8d8 <__vector_4+0x198>
			{
				ir.repeatCMD = FLAG_ON;
 8c6:	ee e5       	ldi	r30, 0x5E	; 94
 8c8:	f1 e0       	ldi	r31, 0x01	; 1
 8ca:	80 81       	ld	r24, Z
				ir.receivingData = FLAG_OFF;
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	8e 7f       	andi	r24, 0xFE	; 254
 8d0:	80 83       	st	Z, r24
				ir.decodingStates = START;
 8d2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ir>
 8d6:	59 c0       	rjmp	.+178    	; 0x98a <__stack+0x8b>
			}
			else if (ir.timePassed > ONES_TIME)
 8d8:	26 2d       	mov	r18, r6
 8da:	37 2d       	mov	r19, r7
 8dc:	48 2d       	mov	r20, r8
 8de:	59 2d       	mov	r21, r9
 8e0:	6d 2f       	mov	r22, r29
 8e2:	7c 2f       	mov	r23, r28
 8e4:	8b 2f       	mov	r24, r27
 8e6:	9e 2f       	mov	r25, r30
 8e8:	a4 e1       	ldi	r26, 0x14	; 20
 8ea:	0e 94 a9 05 	call	0xb52	; 0xb52 <__cmpdi2_s8>
 8ee:	f9 f0       	breq	.+62     	; 0x92e <__stack+0x2f>
 8f0:	f0 f0       	brcs	.+60     	; 0x92e <__stack+0x2f>
			{
				//source of major bug here, must cast one for the size need, defaults to only 16 bit
				ir.dataBuffer |= ((uint32_t)1 << ir.shiftCount);
 8f2:	e5 e4       	ldi	r30, 0x45	; 69
 8f4:	f1 e0       	ldi	r31, 0x01	; 1
 8f6:	20 8d       	ldd	r18, Z+24	; 0x18
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	a0 e0       	ldi	r26, 0x00	; 0
 8fe:	b0 e0       	ldi	r27, 0x00	; 0
 900:	02 2e       	mov	r0, r18
 902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	0a 94       	dec	r0
 90e:	d2 f7       	brpl	.-12     	; 0x904 <__stack+0x5>
 910:	42 89       	ldd	r20, Z+18	; 0x12
 912:	53 89       	ldd	r21, Z+19	; 0x13
 914:	64 89       	ldd	r22, Z+20	; 0x14
 916:	75 89       	ldd	r23, Z+21	; 0x15
 918:	84 2b       	or	r24, r20
 91a:	95 2b       	or	r25, r21
 91c:	a6 2b       	or	r26, r22
 91e:	b7 2b       	or	r27, r23
 920:	82 8b       	std	Z+18, r24	; 0x12
 922:	93 8b       	std	Z+19, r25	; 0x13
 924:	a4 8b       	std	Z+20, r26	; 0x14
 926:	b5 8b       	std	Z+21, r27	; 0x15
				ir.shiftCount++;
 928:	2f 5f       	subi	r18, 0xFF	; 255
 92a:	20 8f       	std	Z+24, r18	; 0x18
 92c:	2e c0       	rjmp	.+92     	; 0x98a <__stack+0x8b>
			}
			else if (ir.timePassed > ZEROS_TIME)
 92e:	26 2d       	mov	r18, r6
 930:	37 2d       	mov	r19, r7
 932:	48 2d       	mov	r20, r8
 934:	59 2d       	mov	r21, r9
 936:	6d 2f       	mov	r22, r29
 938:	7c 2f       	mov	r23, r28
 93a:	8b 2f       	mov	r24, r27
 93c:	9e 2f       	mov	r25, r30
 93e:	a9 e0       	ldi	r26, 0x09	; 9
 940:	0e 94 a9 05 	call	0xb52	; 0xb52 <__cmpdi2_s8>
 944:	11 f1       	breq	.+68     	; 0x98a <__stack+0x8b>
 946:	08 f1       	brcs	.+66     	; 0x98a <__stack+0x8b>
			{
				//same as above this is done more of a just in case, the shift could be removed.
				ir.dataBuffer &= ~((uint32_t)1 << ir.shiftCount);
 948:	e5 e4       	ldi	r30, 0x45	; 69
 94a:	f1 e0       	ldi	r31, 0x01	; 1
 94c:	20 8d       	ldd	r18, Z+24	; 0x18
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	a0 e0       	ldi	r26, 0x00	; 0
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	02 2e       	mov	r0, r18
 958:	04 c0       	rjmp	.+8      	; 0x962 <__stack+0x63>
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	aa 1f       	adc	r26, r26
 960:	bb 1f       	adc	r27, r27
 962:	0a 94       	dec	r0
 964:	d2 f7       	brpl	.-12     	; 0x95a <__stack+0x5b>
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	a0 95       	com	r26
 96c:	b0 95       	com	r27
 96e:	42 89       	ldd	r20, Z+18	; 0x12
 970:	53 89       	ldd	r21, Z+19	; 0x13
 972:	64 89       	ldd	r22, Z+20	; 0x14
 974:	75 89       	ldd	r23, Z+21	; 0x15
 976:	84 23       	and	r24, r20
 978:	95 23       	and	r25, r21
 97a:	a6 23       	and	r26, r22
 97c:	b7 23       	and	r27, r23
 97e:	82 8b       	std	Z+18, r24	; 0x12
 980:	93 8b       	std	Z+19, r25	; 0x13
 982:	a4 8b       	std	Z+20, r26	; 0x14
 984:	b5 8b       	std	Z+21, r27	; 0x15
				ir.shiftCount++;
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	20 8f       	std	Z+24, r18	; 0x18
			}
			if(ir.shiftCount >= 32)
 98a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <ir+0x18>
 98e:	80 32       	cpi	r24, 0x20	; 32
 990:	48 f0       	brcs	.+18     	; 0x9a4 <__stack+0xa5>
			{
				ir.shiftCount = 0;
 992:	e5 e4       	ldi	r30, 0x45	; 69
 994:	f1 e0       	ldi	r31, 0x01	; 1
 996:	10 8e       	std	Z+24, r1	; 0x18
				ir.receivingData = FLAG_OFF;
 998:	ae e5       	ldi	r26, 0x5E	; 94
 99a:	b1 e0       	ldi	r27, 0x01	; 1
 99c:	8c 91       	ld	r24, X
 99e:	8e 7f       	andi	r24, 0xFE	; 254
 9a0:	8c 93       	st	X, r24
				ir.decodingStates = START;
 9a2:	10 82       	st	Z, r1
			break;
		default:
			break;
		}
	}
}
 9a4:	ff 91       	pop	r31
 9a6:	ef 91       	pop	r30
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	af 90       	pop	r10
 9d0:	9f 90       	pop	r9
 9d2:	8f 90       	pop	r8
 9d4:	7f 90       	pop	r7
 9d6:	6f 90       	pop	r6
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <main>:

int main(void) 
{
	commandAction command;
	
	initialise_ATmega328P();
 9e2:	0e 94 23 01 	call	0x246	; 0x246 <initialise_ATmega328P>
	initIR(5, RGB_REMOTE_ADDRESS, RGB_REMOTE);
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	51 e0       	ldi	r21, 0x01	; 1
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	7f ee       	ldi	r23, 0xEF	; 239
 9ee:	85 e0       	ldi	r24, 0x05	; 5
 9f0:	0e 94 04 03 	call	0x608	; 0x608 <initIR>
	init100usTimer2(F_CPU);
 9f4:	20 e0       	ldi	r18, 0x00	; 0
 9f6:	34 e2       	ldi	r19, 0x24	; 36
 9f8:	44 ef       	ldi	r20, 0xF4	; 244
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 6a 00 	call	0xd4	; 0xd4 <init100usTimer2>
	
	// MAIN STRUCTUUR AANLEGGEN
	
	while(1) 
	{										
		command = getIRCommandRec();
 a08:	0e 94 45 03 	call	0x68a	; 0x68a <getIRCommandRec>
		getCommand(command);
 a0c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <getCommand>
		display_RGB(red_Value,green_Value,blue_Value);
 a10:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <blue_Value>
 a14:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <green_Value>
 a18:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <red_Value>
 a1c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <display_RGB>
 a20:	f3 cf       	rjmp	.-26     	; 0xa08 <main+0x26>

00000a22 <__tablejump2__>:
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	05 90       	lpm	r0, Z+
 a28:	f4 91       	lpm	r31, Z
 a2a:	e0 2d       	mov	r30, r0
 a2c:	09 94       	ijmp

00000a2e <__umoddi3>:
 a2e:	68 94       	set
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__udivdi3_umoddi3>

00000a32 <__udivdi3>:
 a32:	e8 94       	clt

00000a34 <__udivdi3_umoddi3>:
 a34:	8f 92       	push	r8
 a36:	9f 92       	push	r9
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	0e 94 25 05 	call	0xa4a	; 0xa4a <__udivmod64>
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	9f 90       	pop	r9
 a46:	8f 90       	pop	r8
 a48:	08 95       	ret

00000a4a <__udivmod64>:
 a4a:	88 24       	eor	r8, r8
 a4c:	99 24       	eor	r9, r9
 a4e:	f4 01       	movw	r30, r8
 a50:	e4 01       	movw	r28, r8
 a52:	b0 e4       	ldi	r27, 0x40	; 64
 a54:	9f 93       	push	r25
 a56:	aa 27       	eor	r26, r26
 a58:	9a 15       	cp	r25, r10
 a5a:	8b 04       	cpc	r8, r11
 a5c:	9c 04       	cpc	r9, r12
 a5e:	ed 05       	cpc	r30, r13
 a60:	fe 05       	cpc	r31, r14
 a62:	cf 05       	cpc	r28, r15
 a64:	d0 07       	cpc	r29, r16
 a66:	a1 07       	cpc	r26, r17
 a68:	98 f4       	brcc	.+38     	; 0xa90 <__udivmod64+0x46>
 a6a:	ad 2f       	mov	r26, r29
 a6c:	dc 2f       	mov	r29, r28
 a6e:	cf 2f       	mov	r28, r31
 a70:	fe 2f       	mov	r31, r30
 a72:	e9 2d       	mov	r30, r9
 a74:	98 2c       	mov	r9, r8
 a76:	89 2e       	mov	r8, r25
 a78:	98 2f       	mov	r25, r24
 a7a:	87 2f       	mov	r24, r23
 a7c:	76 2f       	mov	r23, r22
 a7e:	65 2f       	mov	r22, r21
 a80:	54 2f       	mov	r21, r20
 a82:	43 2f       	mov	r20, r19
 a84:	32 2f       	mov	r19, r18
 a86:	22 27       	eor	r18, r18
 a88:	b8 50       	subi	r27, 0x08	; 8
 a8a:	31 f7       	brne	.-52     	; 0xa58 <__udivmod64+0xe>
 a8c:	bf 91       	pop	r27
 a8e:	27 c0       	rjmp	.+78     	; 0xade <__udivmod64+0x94>
 a90:	1b 2e       	mov	r1, r27
 a92:	bf 91       	pop	r27
 a94:	bb 27       	eor	r27, r27
 a96:	22 0f       	add	r18, r18
 a98:	33 1f       	adc	r19, r19
 a9a:	44 1f       	adc	r20, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	66 1f       	adc	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	88 1c       	adc	r8, r8
 aa8:	99 1c       	adc	r9, r9
 aaa:	ee 1f       	adc	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	cc 1f       	adc	r28, r28
 ab0:	dd 1f       	adc	r29, r29
 ab2:	aa 1f       	adc	r26, r26
 ab4:	bb 1f       	adc	r27, r27
 ab6:	8a 14       	cp	r8, r10
 ab8:	9b 04       	cpc	r9, r11
 aba:	ec 05       	cpc	r30, r12
 abc:	fd 05       	cpc	r31, r13
 abe:	ce 05       	cpc	r28, r14
 ac0:	df 05       	cpc	r29, r15
 ac2:	a0 07       	cpc	r26, r16
 ac4:	b1 07       	cpc	r27, r17
 ac6:	48 f0       	brcs	.+18     	; 0xada <__udivmod64+0x90>
 ac8:	8a 18       	sub	r8, r10
 aca:	9b 08       	sbc	r9, r11
 acc:	ec 09       	sbc	r30, r12
 ace:	fd 09       	sbc	r31, r13
 ad0:	ce 09       	sbc	r28, r14
 ad2:	df 09       	sbc	r29, r15
 ad4:	a0 0b       	sbc	r26, r16
 ad6:	b1 0b       	sbc	r27, r17
 ad8:	21 60       	ori	r18, 0x01	; 1
 ada:	1a 94       	dec	r1
 adc:	e1 f6       	brne	.-72     	; 0xa96 <__udivmod64+0x4c>
 ade:	2e f4       	brtc	.+10     	; 0xaea <__udivmod64+0xa0>
 ae0:	94 01       	movw	r18, r8
 ae2:	af 01       	movw	r20, r30
 ae4:	be 01       	movw	r22, r28
 ae6:	cd 01       	movw	r24, r26
 ae8:	00 0c       	add	r0, r0
 aea:	08 95       	ret

00000aec <__ashrdi3>:
 aec:	97 fb       	bst	r25, 7
 aee:	10 f8       	bld	r1, 0

00000af0 <__lshrdi3>:
 af0:	16 94       	lsr	r1
 af2:	00 08       	sbc	r0, r0
 af4:	0f 93       	push	r16
 af6:	08 30       	cpi	r16, 0x08	; 8
 af8:	98 f0       	brcs	.+38     	; 0xb20 <__lshrdi3+0x30>
 afa:	08 50       	subi	r16, 0x08	; 8
 afc:	23 2f       	mov	r18, r19
 afe:	34 2f       	mov	r19, r20
 b00:	45 2f       	mov	r20, r21
 b02:	56 2f       	mov	r21, r22
 b04:	67 2f       	mov	r22, r23
 b06:	78 2f       	mov	r23, r24
 b08:	89 2f       	mov	r24, r25
 b0a:	90 2d       	mov	r25, r0
 b0c:	f4 cf       	rjmp	.-24     	; 0xaf6 <__lshrdi3+0x6>
 b0e:	05 94       	asr	r0
 b10:	97 95       	ror	r25
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	57 95       	ror	r21
 b1a:	47 95       	ror	r20
 b1c:	37 95       	ror	r19
 b1e:	27 95       	ror	r18
 b20:	0a 95       	dec	r16
 b22:	aa f7       	brpl	.-22     	; 0xb0e <__lshrdi3+0x1e>
 b24:	0f 91       	pop	r16
 b26:	08 95       	ret

00000b28 <__adddi3_s8>:
 b28:	00 24       	eor	r0, r0
 b2a:	a7 fd       	sbrc	r26, 7
 b2c:	00 94       	com	r0
 b2e:	2a 0f       	add	r18, r26
 b30:	30 1d       	adc	r19, r0
 b32:	40 1d       	adc	r20, r0
 b34:	50 1d       	adc	r21, r0
 b36:	60 1d       	adc	r22, r0
 b38:	70 1d       	adc	r23, r0
 b3a:	80 1d       	adc	r24, r0
 b3c:	90 1d       	adc	r25, r0
 b3e:	08 95       	ret

00000b40 <__subdi3>:
 b40:	2a 19       	sub	r18, r10
 b42:	3b 09       	sbc	r19, r11
 b44:	4c 09       	sbc	r20, r12
 b46:	5d 09       	sbc	r21, r13
 b48:	6e 09       	sbc	r22, r14
 b4a:	7f 09       	sbc	r23, r15
 b4c:	80 0b       	sbc	r24, r16
 b4e:	91 0b       	sbc	r25, r17
 b50:	08 95       	ret

00000b52 <__cmpdi2_s8>:
 b52:	00 24       	eor	r0, r0
 b54:	a7 fd       	sbrc	r26, 7
 b56:	00 94       	com	r0
 b58:	2a 17       	cp	r18, r26
 b5a:	30 05       	cpc	r19, r0
 b5c:	40 05       	cpc	r20, r0
 b5e:	50 05       	cpc	r21, r0
 b60:	60 05       	cpc	r22, r0
 b62:	70 05       	cpc	r23, r0
 b64:	80 05       	cpc	r24, r0
 b66:	90 05       	cpc	r25, r0
 b68:	08 95       	ret

00000b6a <_exit>:
 b6a:	f8 94       	cli

00000b6c <__stop_program>:
 b6c:	ff cf       	rjmp	.-2      	; 0xb6c <__stop_program>
