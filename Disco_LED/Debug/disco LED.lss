
disco LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d5  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017a  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016e  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <RGB>:
 */ 
#include <avr/io.h>
#include <disco_functions.h>

void RGB(int red, int green, int blue) {
	OCR0A = red;
  80:	87 bd       	out	0x27, r24	; 39
  82:	08 95       	ret

00000084 <init>:
//	OCR0B = blue;
}

void init(void) {
	DDRD = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1 << 7);			// Set compare output mode A to non inverting
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << 6);	
  8e:	84 b5       	in	r24, 0x24	; 36
  90:	8f 7b       	andi	r24, 0xBF	; 191
  92:	84 bd       	out	0x24, r24	; 36
/*	
	TCCR0A |= (1 << 5);			// Set compare output mode B to non inverting
	TCCR0A &= ~(1 << 4);
*/	
	TCCR0B &= ~(1 << 7);		// Set FOC0A to 0
  94:	85 b5       	in	r24, 0x25	; 37
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << 6);		// Set FOC0B to 0
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A |= (1 << 0);			// Set WGM00 to 1
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << 1);			// Set WGM01 to 1
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << 3);			// Set WGM02 to 1
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	85 bd       	out	0x25, r24	; 37
								// Set waveform generation mode to fast PWM
						
	TCCR0B |= (1 << 0);			// Set CS0 to 1
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << 1);			// Set CS1 to 1
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << 2);		// Set CS2 to 0
  be:	85 b5       	in	r24, 0x25	; 37
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	85 bd       	out	0x25, r24	; 37
								// Setting prescaler to 64, PWM frequency is around 1kHz
	
	TIFR0 = 0;
  c4:	15 ba       	out	0x15, r1	; 21
	TCNT0 = 0;
  c6:	16 bc       	out	0x26, r1	; 38
  c8:	08 95       	ret

000000ca <main>:
#include <util/delay.h>
#include <disco_functions.h>

int main(void) {
	
	init();
  ca:	0e 94 42 00 	call	0x84	; 0x84 <init>
	char red = 4;
	char green = 0;
	char blue = 0;
	
	while(1) {
		RGB(red, green, blue);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 40 00 	call	0x80	; 0x80 <RGB>
	}
  de:	f7 cf       	rjmp	.-18     	; 0xce <main+0x4>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
