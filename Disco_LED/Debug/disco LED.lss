
disco LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cd  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001de  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  78:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <display_RGB>:
#include <disco_functions.h>
#include <util/delay.h>

void display_RGB(char red, char green, char blue) {
	
	red = 255 - red;
  80:	80 95       	com	r24
	green = 255 - green;
  82:	60 95       	com	r22
	blue = 255 - blue;
  84:	40 95       	com	r20

	OCR0A = red;
  86:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
  88:	48 bd       	out	0x28, r20	; 40
	OCR2B = green;
  8a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  8e:	08 95       	ret

00000090 <initialise_ATmega328P>:
	
	/////////////
	// Timer 0 //
	/////////////
	
	DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1 << 0);			// Set WGM00 to 1
  94:	94 b5       	in	r25, 0x24	; 36
  96:	91 60       	ori	r25, 0x01	; 1
  98:	94 bd       	out	0x24, r25	; 36
	TCCR0A |= (1 << 1);			// Set WGM01 to 1
  9a:	94 b5       	in	r25, 0x24	; 36
  9c:	92 60       	ori	r25, 0x02	; 2
  9e:	94 bd       	out	0x24, r25	; 36
	TCCR0B &= ~(1 << 3);		// Set WGM02 to 0
  a0:	95 b5       	in	r25, 0x25	; 37
  a2:	97 7f       	andi	r25, 0xF7	; 247
  a4:	95 bd       	out	0x25, r25	; 37
	// Set waveform generation mode to fast PWM 
	
	TCCR0A |= (1 << 7);			// Set compare output mode A to inverting
  a6:	94 b5       	in	r25, 0x24	; 36
  a8:	90 68       	ori	r25, 0x80	; 128
  aa:	94 bd       	out	0x24, r25	; 36
	TCCR0A |= (1 << 6);	
  ac:	94 b5       	in	r25, 0x24	; 36
  ae:	90 64       	ori	r25, 0x40	; 64
  b0:	94 bd       	out	0x24, r25	; 36

	TCCR0A |= (1 << 5);			// Set compare output mode B to inverting
  b2:	94 b5       	in	r25, 0x24	; 36
  b4:	90 62       	ori	r25, 0x20	; 32
  b6:	94 bd       	out	0x24, r25	; 36
	TCCR0A |= (1 << 4);
  b8:	94 b5       	in	r25, 0x24	; 36
  ba:	90 61       	ori	r25, 0x10	; 16
  bc:	94 bd       	out	0x24, r25	; 36

	TCCR0B &= ~(1 << 7);		// Set FOC0A to 0
  be:	95 b5       	in	r25, 0x25	; 37
  c0:	9f 77       	andi	r25, 0x7F	; 127
  c2:	95 bd       	out	0x25, r25	; 37
	TCCR0B &= ~(1 << 6);		// Set FOC0B to 0
  c4:	95 b5       	in	r25, 0x25	; 37
  c6:	9f 7b       	andi	r25, 0xBF	; 191
  c8:	95 bd       	out	0x25, r25	; 37
						
	TCCR0B |= (1 << 0);			// Set CS00 to 1
  ca:	95 b5       	in	r25, 0x25	; 37
  cc:	91 60       	ori	r25, 0x01	; 1
  ce:	95 bd       	out	0x25, r25	; 37
	TCCR0B |= (1 << 1);			// Set CS01 to 1
  d0:	95 b5       	in	r25, 0x25	; 37
  d2:	92 60       	ori	r25, 0x02	; 2
  d4:	95 bd       	out	0x25, r25	; 37
	TCCR0B &= ~(1 << 2);		// Set CS02 to 0
  d6:	95 b5       	in	r25, 0x25	; 37
  d8:	9b 7f       	andi	r25, 0xFB	; 251
  da:	95 bd       	out	0x25, r25	; 37
								
	/////////////						
	// Timer 2 //
	/////////////
							
	TCCR2A |= (1 << 0);			// Set WGM20 to 1
  dc:	a0 eb       	ldi	r26, 0xB0	; 176
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	9c 91       	ld	r25, X
  e2:	91 60       	ori	r25, 0x01	; 1
  e4:	9c 93       	st	X, r25
	TCCR2A |= (1 << 1);			// Set WGM21 to 1
  e6:	9c 91       	ld	r25, X
  e8:	92 60       	ori	r25, 0x02	; 2
  ea:	9c 93       	st	X, r25
	TCCR2B &= ~(1 << 3);		// Set WGM22 to 0
  ec:	e1 eb       	ldi	r30, 0xB1	; 177
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	97 7f       	andi	r25, 0xF7	; 247
  f4:	90 83       	st	Z, r25
	// Set waveform generation mode to fast PWM 
		
	TCCR2A |= (1 << 5);			// Set compare output mode A to inverting
  f6:	9c 91       	ld	r25, X
  f8:	90 62       	ori	r25, 0x20	; 32
  fa:	9c 93       	st	X, r25
	TCCR2A |= (1 << 4);
  fc:	9c 91       	ld	r25, X
  fe:	90 61       	ori	r25, 0x10	; 16
 100:	9c 93       	st	X, r25

	TCCR2B &= ~(1 << 7);		// Set FOC2A to 0
 102:	90 81       	ld	r25, Z
 104:	9f 77       	andi	r25, 0x7F	; 127
 106:	90 83       	st	Z, r25
	TCCR2B &= ~(1 << 6);		// Set FOC2B to 0
 108:	90 81       	ld	r25, Z
 10a:	9f 7b       	andi	r25, 0xBF	; 191
 10c:	90 83       	st	Z, r25
	
	TCCR2B &= ~(1 << 0);		// Set CS20 to 0
 10e:	90 81       	ld	r25, Z
 110:	9e 7f       	andi	r25, 0xFE	; 254
 112:	90 83       	st	Z, r25
	TCCR2B &= ~(1 << 1);		// Set CS21 to 0
 114:	90 81       	ld	r25, Z
 116:	9d 7f       	andi	r25, 0xFD	; 253
 118:	90 83       	st	Z, r25
	TCCR2B |=(1 << 2);			// Set CS22 to 1
 11a:	90 81       	ld	r25, Z
 11c:	94 60       	ori	r25, 0x04	; 4
 11e:	90 83       	st	Z, r25
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 120:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 122:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 124:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 128:	08 95       	ret

0000012a <testRGB>:
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 12a:	17 bc       	out	0x27, r1	; 39
	OCR0B = blue;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 130:	e4 eb       	ldi	r30, 0xB4	; 180
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	39 e6       	ldi	r19, 0x69	; 105
 13a:	48 e1       	ldi	r20, 0x18	; 24
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	40 40       	sbci	r20, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <testRGB+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <testRGB+0x1c>
 146:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 148:	17 bc       	out	0x27, r1	; 39
	OCR0B = blue;
 14a:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 14c:	9f e7       	ldi	r25, 0x7F	; 127
 14e:	90 83       	st	Z, r25
 150:	5f ef       	ldi	r21, 0xFF	; 255
 152:	29 e6       	ldi	r18, 0x69	; 105
 154:	38 e1       	ldi	r19, 0x18	; 24
 156:	51 50       	subi	r21, 0x01	; 1
 158:	20 40       	sbci	r18, 0x00	; 0
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <testRGB+0x2c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <testRGB+0x36>
 160:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 162:	17 bc       	out	0x27, r1	; 39
	OCR0B = blue;
 164:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 166:	10 82       	st	Z, r1
 168:	4f ef       	ldi	r20, 0xFF	; 255
 16a:	59 e6       	ldi	r21, 0x69	; 105
 16c:	28 e1       	ldi	r18, 0x18	; 24
 16e:	41 50       	subi	r20, 0x01	; 1
 170:	50 40       	sbci	r21, 0x00	; 0
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <testRGB+0x44>
 176:	00 c0       	rjmp	.+0      	; 0x178 <testRGB+0x4e>
 178:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 17a:	97 bd       	out	0x27, r25	; 39
	OCR0B = blue;
 17c:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 17e:	10 82       	st	Z, r1
 180:	3f ef       	ldi	r19, 0xFF	; 255
 182:	49 e6       	ldi	r20, 0x69	; 105
 184:	58 e1       	ldi	r21, 0x18	; 24
 186:	31 50       	subi	r19, 0x01	; 1
 188:	40 40       	sbci	r20, 0x00	; 0
 18a:	50 40       	sbci	r21, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <testRGB+0x5c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <testRGB+0x66>
 190:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 192:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 194:	98 bd       	out	0x28, r25	; 40
	OCR2B = green;
 196:	10 82       	st	Z, r1
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	39 e6       	ldi	r19, 0x69	; 105
 19c:	48 e1       	ldi	r20, 0x18	; 24
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	30 40       	sbci	r19, 0x00	; 0
 1a2:	40 40       	sbci	r20, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <testRGB+0x74>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <testRGB+0x7e>
 1a8:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 1aa:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 1ac:	18 bc       	out	0x28, r1	; 40
	OCR2B = green;
 1ae:	10 82       	st	Z, r1
 1b0:	5f ef       	ldi	r21, 0xFF	; 255
 1b2:	29 e6       	ldi	r18, 0x69	; 105
 1b4:	38 e1       	ldi	r19, 0x18	; 24
 1b6:	51 50       	subi	r21, 0x01	; 1
 1b8:	20 40       	sbci	r18, 0x00	; 0
 1ba:	30 40       	sbci	r19, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <testRGB+0x8c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <testRGB+0x96>
 1c0:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 1c2:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 1c4:	18 bc       	out	0x28, r1	; 40
	OCR2B = green;
 1c6:	90 83       	st	Z, r25
 1c8:	4f ef       	ldi	r20, 0xFF	; 255
 1ca:	59 e6       	ldi	r21, 0x69	; 105
 1cc:	28 e1       	ldi	r18, 0x18	; 24
 1ce:	41 50       	subi	r20, 0x01	; 1
 1d0:	50 40       	sbci	r21, 0x00	; 0
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <testRGB+0xa4>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <testRGB+0xae>
 1d8:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 1da:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 1dc:	18 bc       	out	0x28, r1	; 40
	OCR2B = green;
 1de:	80 83       	st	Z, r24
 1e0:	3f ef       	ldi	r19, 0xFF	; 255
 1e2:	49 e6       	ldi	r20, 0x69	; 105
 1e4:	58 e1       	ldi	r21, 0x18	; 24
 1e6:	31 50       	subi	r19, 0x01	; 1
 1e8:	40 40       	sbci	r20, 0x00	; 0
 1ea:	50 40       	sbci	r21, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <testRGB+0xbc>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <testRGB+0xc6>
 1f0:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 1f2:	20 e8       	ldi	r18, 0x80	; 128
 1f4:	27 bd       	out	0x27, r18	; 39
	OCR0B = blue;
 1f6:	18 bc       	out	0x28, r1	; 40
	OCR2B = green;
 1f8:	80 83       	st	Z, r24
 1fa:	3f ef       	ldi	r19, 0xFF	; 255
 1fc:	49 e6       	ldi	r20, 0x69	; 105
 1fe:	58 e1       	ldi	r21, 0x18	; 24
 200:	31 50       	subi	r19, 0x01	; 1
 202:	40 40       	sbci	r20, 0x00	; 0
 204:	50 40       	sbci	r21, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <testRGB+0xd6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <testRGB+0xe0>
 20a:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 20c:	17 bc       	out	0x27, r1	; 39
	OCR0B = blue;
 20e:	18 bc       	out	0x28, r1	; 40
	OCR2B = green;
 210:	80 83       	st	Z, r24
 212:	3f ef       	ldi	r19, 0xFF	; 255
 214:	49 e6       	ldi	r20, 0x69	; 105
 216:	58 e1       	ldi	r21, 0x18	; 24
 218:	31 50       	subi	r19, 0x01	; 1
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	50 40       	sbci	r21, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <testRGB+0xee>
 220:	00 c0       	rjmp	.+0      	; 0x222 <testRGB+0xf8>
 222:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 224:	17 bc       	out	0x27, r1	; 39
	OCR0B = blue;
 226:	28 bd       	out	0x28, r18	; 40
	OCR2B = green;
 228:	80 83       	st	Z, r24
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	39 e6       	ldi	r19, 0x69	; 105
 22e:	48 e1       	ldi	r20, 0x18	; 24
 230:	21 50       	subi	r18, 0x01	; 1
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	40 40       	sbci	r20, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <testRGB+0x106>
 238:	00 c0       	rjmp	.+0      	; 0x23a <testRGB+0x110>
 23a:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 23c:	97 bd       	out	0x27, r25	; 39
	OCR0B = blue;
 23e:	98 bd       	out	0x28, r25	; 40
	OCR2B = green;
 240:	90 83       	st	Z, r25
 242:	5f ef       	ldi	r21, 0xFF	; 255
 244:	99 e6       	ldi	r25, 0x69	; 105
 246:	28 e1       	ldi	r18, 0x18	; 24
 248:	51 50       	subi	r21, 0x01	; 1
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <testRGB+0x11e>
 250:	00 c0       	rjmp	.+0      	; 0x252 <testRGB+0x128>
 252:	00 00       	nop
	
	red = 255 - red;
	green = 255 - green;
	blue = 255 - blue;

	OCR0A = red;
 254:	87 bd       	out	0x27, r24	; 39
	OCR0B = blue;
 256:	88 bd       	out	0x28, r24	; 40
	OCR2B = green;
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <main>:
#include <util/delay.h>
#include <disco_functions.h>

int main(void) {
	
	initialise_ATmega328P();
 25c:	0e 94 48 00 	call	0x90	; 0x90 <initialise_ATmega328P>
	testRGB();
 260:	0e 94 95 00 	call	0x12a	; 0x12a <testRGB>
	
	while(1) {	
		
		display_RGB(0,0,0);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 40 00 	call	0x80	; 0x80 <display_RGB>
	}
 26e:	fa cf       	rjmp	.-12     	; 0x264 <main+0x8>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
